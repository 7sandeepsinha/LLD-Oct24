Layered architecture

Controllers
Service
Repository
Models -- DONE

controllers -> first point of contact -> APIs
In the tictactoe, we dont have APIs, hence we will keep, methods to play the game inside the
controller.

Service -> logics for winner, draw etc.

repository -> since its not persistent, we dont need to store anything, hence no repo needed.


Strategy design ->
1. Bot difficulty
2. Winning strategy -> O(1)

Homework ->
1. Complete all TODOs mentioned in the code
2. Complete undo logic with winner check update.
3. Complete replay logic
4. Test all possible scenarios, whether they are working fine or not.
5. Convert Game class into Game builder.

31st JAN -> DONE


Requirement gathering -> Class diagram
Step 1 -> Code the models
Step 2 -> Methods in the controller
Step 3 -> Controllers only contain validations for user input, and on business logic.
          So we put business logic in respective service classes.
Step 4 -> For some business logic, strategy design pattern, so wrote them inside service package
Step 5 -> using the methods from controller, we complete the game running logic.
